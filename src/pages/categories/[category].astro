---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { SITE_TITLE } from '../../consts';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  
  // Get all unique categories
  const uniqueCategories = [...new Set(posts.map(post => post.data.category).filter(Boolean))];
  
  // Create a path for each category, lowercased for the URL
  return uniqueCategories.map(category => {
    // Filter posts that have this category
    const filteredPosts = posts.filter(post => 
      post.data.category === category
    ).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
    
    return {
      params: { category: category.toLowerCase() },
      props: { posts: filteredPosts, category },
    };
  });
}

const { posts, category } = Astro.props;

// Get all categories with counts for sidebar
const allPosts = await getCollection('blog');
const categories = [...new Set(allPosts.map(post => post.data.category).filter(Boolean))].sort();
const categoryCounts = categories.reduce((acc, category) => {
  const count = allPosts.filter(post => post.data.category === category).length;
  acc[category] = count;
  return acc;
}, {});

// Get all tags with counts for sidebar
const allTags = allPosts.flatMap(post => post.data.tags || []);
const tagCounts = allTags.reduce((acc, tag) => {
  acc[tag] = (acc[tag] || 0) + 1;
  return acc;
}, {});
const popularTags = Object.entries(tagCounts)
  .sort((a, b) => b[1] - a[1])
  .map(([tag, count]) => ({ tag, count }));
---

<html lang="en">
	<head>
		<BaseHead title={`${category} | ${SITE_TITLE}`} description={`Browse all posts in the ${category} category`} />
		<style>
			.content-grid {
				display: grid;
				grid-template-columns: 3fr 1fr;
				gap: 2rem;
				max-width: 1200px;
				margin: 0 auto;
				padding: 2rem 1rem;
			}
			
			.page-title {
				margin-bottom: 2rem;
				font-size: 2rem;
			}
			
			.category-name {
				color: var(--accent);
			}
			
			/* Post List Styles */
			.post-list {
				display: flex;
				flex-direction: column;
				gap: 1.5rem;
			}
			.post-item {
				display: block;
				border-bottom: 1px solid rgba(var(--gray-light), 0.2);
				padding-bottom: 1.5rem;
				text-decoration: none;
			}
			.post-item:last-child {
				border-bottom: none;
			}
			.post-title {
				font-size: 1.5rem;
				margin: 0 0 0.5rem 0;
				color: rgb(var(--black));
			}
			.post-meta {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				margin-bottom: 0.5rem;
				font-size: 0.85rem;
			}
			.post-date {
				color: rgb(var(--gray));
			}
			.post-category {
				background-color: var(--accent);
				color: rgb(var(--background));
				padding: 0.2em 0.5em;
				border-radius: 4px;
				font-size: 0.7em;
				font-weight: bold;
				text-transform: uppercase;
			}
			.post-excerpt {
				color: rgb(var(--gray-dark));
				margin-bottom: 0.75rem;
			}
			.post-tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
			}
			.post-tag {
				color: rgb(var(--gray));
				font-size: 0.8rem;
			}
			
			/* Sidebar Styles */
			.sidebar h2 {
				font-size: 1.2rem;
				margin-bottom: 1rem;
				padding-bottom: 0.5rem;
				border-bottom: 1px solid rgba(var(--gray-light), 0.3);
				color: rgb(var(--black));
			}
			.sidebar section {
				margin-bottom: 2rem;
			}
			.category-list, .tag-list {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
			}
			.category-item {
				display: flex;
				justify-content: space-between;
				padding: 0.3rem 0;
				text-decoration: none;
				color: rgb(var(--gray-dark));
				transition: color 0.2s ease;
			}
			.category-item:hover {
				color: var(--accent);
			}
			.category-count {
				background-color: rgba(var(--gray-light), 0.2);
				color: rgb(var(--gray-dark));
				padding: 0.1rem 0.4rem;
				border-radius: 4px;
				font-size: 0.75rem;
			}
			.tag-cloud {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
			}
			.tag-item {
				background-color: rgba(var(--gray-light), 0.2);
				color: rgb(var(--gray-dark));
				padding: 0.3rem 0.6rem;
				border-radius: 4px;
				font-size: 0.8rem;
				text-decoration: none;
				transition: all 0.2s ease;
			}
			.tag-item:hover {
				background-color: var(--accent);
				color: rgb(var(--background));
			}
			
			@media (max-width: 900px) {
				.content-grid {
					grid-template-columns: 1fr;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		
		<div class="content-grid">
			<main>
				<h1 class="page-title">Posts in <span class="category-name">{category}</span></h1>
				<div class="post-list">
					{
						posts.map((post) => (
							<a href={`/blog/${post.id}/`} class="post-item">
								<h2 class="post-title">{post.data.title}</h2>
								<div class="post-meta">
									<span class="post-date"><FormattedDate date={post.data.pubDate} /></span>
									<span class="post-category">{post.data.category}</span>
								</div>
								<p class="post-excerpt">{post.data.description}</p>
								{post.data.tags && post.data.tags.length > 0 && (
									<div class="post-tags">
										{post.data.tags.map((tag) => (
											<span class="post-tag">#{tag}</span>
										))}
									</div>
								)}
							</a>
						))
					}
				</div>
			</main>
			
			<aside class="sidebar">
				<section>
					<h2>Categories</h2>
					<div class="category-list">
						{categories.map((cat) => (
							<a href={`/categories/${cat.toLowerCase()}`} class="category-item">
								<span>{cat}</span>
								<span class="category-count">{categoryCounts[cat]}</span>
							</a>
						))}
					</div>
				</section>
				
				<section>
					<h2>Tags</h2>
					<div class="tag-cloud">
						{popularTags.map(({ tag }) => (
							<a href={`/tags/${tag}`} class="tag-item">
								#{tag}
							</a>
						))}
					</div>
				</section>
			</aside>
		</div>
		
	</body>
</html>